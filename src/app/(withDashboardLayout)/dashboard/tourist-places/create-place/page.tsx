"use client"

import type React from "react"

import { useState, type FormEvent, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ArrowLeft, Plus, Check, X } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { Separator } from "@/components/ui/separator"
import {
  useCreatePlaceCategoryMutation,
  useGetAllPlaceCategoriesQuery,
  useCreateTouristPlaceMutation,
} from "@/components/Redux/RTK/placeApi"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { toast } from "sonner"
import { useRouter } from "next/navigation"
import { Badge } from "@/components/ui/badge"
import LokkhoEditor from "./_components/LokkhoEditor"

interface Category {
  id: string
  name: string
}

export default function CreateTouristPlacePage() {
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null)

  const [createPlaceCategory] = useCreatePlaceCategoryMutation()
  const [createTouristPlace, { isLoading }] = useCreateTouristPlaceMutation()
  const { data } = useGetAllPlaceCategoriesQuery(undefined)

  // Form state
  const [formData, setFormData] = useState({
    name: "ржЬрзЗрж▓рж╛ ржкрзНрж░рж╢рж╛рж╕ржи ржЗржХрзЛ ржкрж╛рж░рзНржХ",
    category_id: "6",
    location:
      "ржкржЮрзНржЪржЧржбрж╝ ржЬрзЗрж▓рж╛рж░ рж╕ржжрзНржп ржирж┐рж░рзНржорж┐ржд ржЬрзЗрж▓рж╛ ржкрзНрж░рж╢рж╛рж╕ржи ржЗржХрзЛ ржкрж╛рж░рзНржХ ржмрж░рзНрждржорж╛ржирзЗ рж╕рзНржерж╛ржирзАржпрж╝ ржУ ржмрж╣рж┐рж░рж╛ржЧржд ржкрж░рзНржпржЯржХржжрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржмрж┐ржирзЛржжржиржХрзЗржирзНржжрзНрж░ рж╣рж┐рж╕рзЗржмрзЗ ржЧржбрж╝рзЗ ржЙржарзЗржЫрзЗред ржПржЯрж┐ ржкржЮрзНржЪржЧржбрж╝ рж╕ржжрж░ ржЙржкржЬрзЗрж▓рж╛рж░ ржзрж╛ржХрзНржХрж╛ржорж╛рж░рж╛ ржЗржЙржирж┐ржпрж╝ржирзЗрж░ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржорзАрж░ржЧржбрж╝ ржПрж▓рж╛ржХрж╛ржпрж╝ ржХрж░рждрзЛржпрж╝рж╛ ржиржжрзАрж░ рждрзАрж░рзЗ ржЕржмрж╕рзНржерж┐рждредтАЛ",
    description: `ржкржЮрзНржЪржЧржбрж╝ ржЬрзЗрж▓рж╛ ржкрзНрж░рж╢рж╛рж╕ржирзЗрж░ ржЙржжрзНржпрзЛржЧрзЗ ржХрж░рждрзЛржпрж╝рж╛ ржиржжрзАрж░ рждрзАрж░ржШрзЗржБрж╖рзЗ ржирж┐рж░рзНржорж┐ржд ржПржЗ ржЗржХрзЛ ржкрж╛рж░рзНржХ ржкрзНрж░ржХрзГрждрж┐ржкрзНрж░рзЗржорзА ржУ ржнрзНрж░ржоржгржкрж┐ржкрж╛рж╕рзБ ржорж╛ржирзБрж╖рзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржирждрзБржи ржЖржХрж░рзНрж╖ржгред ржПржЯрж┐ ржирж┐рж░рзНржорж╛ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржиржХрж╢рж╛ржпрж╝, ржпрзЗржЦрж╛ржирзЗ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ рж╕рзМржирзНржжрж░рзНржп, ржирж┐рж░рзНржорж▓ ржмрж╛рждрж╛рж╕ ржУ рж╕ржмрзБржЬ ржкрж░рж┐ржмрзЗрж╢ ржПржХрж╕рж╛ржерзЗ ржЙржкржнрзЛржЧ ржХрж░рж╛ ржпрж╛ржпрж╝ред`,
    special_features: "ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржиржХрж╢рж╛, ржХрж░рждрзЛржпрж╝рж╛ ржиржжрзАрж░ рждрзАрж░рзЗ ржЕржмрж╕рзНржерж╛ржи, рж╕рзВрж░рзНржпрж╛рж╕рзНржд ржжрзЗржЦрж╛рж░ рж╕рзБржмрж┐ржзрж╛, ржУржпрж╝рж╛ржХржУржпрж╝рзЗ ржУ ржмрзЗржЮрзНржЪ, рж╕рж╛ржЬрж╛ржирзЛ ржмрж╛ржЧрж╛ржи",
    main_attractions: `ЁЯФ╕ ржорзВрж▓ ржЖржХрж░рзНрж╖ржгрж╕ржорзВрж╣:
ржХрж░рждрзЛржпрж╝рж╛ ржиржжрзАрж░ рж╕рзМржирзНржжрж░рзНржп: ржиржжрзАрж░ ржкрж╛ржбрж╝рзЗ ржмрж╕рзЗ рж╕рзВрж░рзНржпрж╛рж╕рзНржд ржЙржкржнрзЛржЧрзЗрж░ ржЕрж╕рж╛ржзрж╛рж░ржг рж╕рзБржпрзЛржЧ

ржУржпрж╝рж╛ржХржУржпрж╝рзЗ ржУ ржмрзЗржЮрзНржЪ: ржкрж░рж┐ржмрж╛рж░ ржУ ржмржирзНржзрзБржжрзЗрж░ ржирж┐ржпрж╝рзЗ ржмрж╕рзЗ рж╕ржоржпрж╝ ржХрж╛ржЯрж╛ржирзЛрж░ ржмрзНржпржмрж╕рзНржерж╛

рж╕рж╛ржЬрж╛ржирзЛ ржмрж╛ржЧрж╛ржи ржУ рж╕ржмрзБржЬ ржЧрж╛ржЫржкрж╛рж▓рж╛: ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржПржмржВ ржоржирзЛрж░ржо ржкрж░рж┐ржмрзЗрж╢

ржЫржмрж┐рж░ ржЬржирзНржп ржжрж╛рж░рзБржи рж▓рзЛржХрзЗрж╢ржи: ржлржЯрзЛржЧрзНрж░рж╛ржлрж┐ ржкрзНрж░рзЗржорзАржжрзЗрж░ ржЬржирзНржп ржПржХрж╛ржзрж┐ржХ рж╕рзНржкржЯ

ржмрж╛ржЪрзНржЪрж╛ржжрзЗрж░ ржЬржирзНржп ржЦрзЗрж▓рж╛рж░ ржЬрж╛ржпрж╝ржЧрж╛: ржирж┐рж░рж╛ржкржж ржУ ржЖржиржирзНржжржжрж╛ржпрж╝ржХ ржПрж▓рж╛ржХрж╛

рж░рзЗрж╕рзНржЯ рж╣рж╛ржЙрж╕/ржЪрж┐рж▓рж┐ржВ ржЬрзЛржи (ржкрж░рж┐ржХрж▓рзНржкржирж╛ржзрзАржи ржмрж╛ ржЖржВрж╢рж┐ржХ ржЪрж╛рж▓рзБ): ржЖрж░рж╛ржо ржХрж░рж╛рж░ рж╕рзНржерж╛ржи`,
    purpose_and_significance: `ЁЯОп рж▓ржХрзНрж╖рзНржп ржУ ржЙржжрзНржжрзЗрж╢рзНржп:
ржПржЗ ржкрж╛рж░рзНржХржЯрж┐рж░ ржорзВрж▓ ржЙржжрзНржжрзЗрж╢рзНржп рж╣рж▓рзЛ ржкрж░рж┐ржмрзЗрж╢ рж╕ржВрж░ржХрзНрж╖ржг ржУ рж╕рж╛ржзрж╛рж░ржг ржорж╛ржирзБрж╖ржХрзЗ ржкрзНрж░ржХрзГрждрж┐рж░ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржПржирзЗ ржорж╛ржирж╕рж┐ржХ ржкрзНрж░рж╢рж╛ржирзНрждрж┐ ржжрзЗржУржпрж╝рж╛ред ржПржХржЗрж╕ржЩрзНржЧрзЗ ржПржЯрж┐ ржЬрзЗрж▓рж╛рж░ ржкрж░рзНржпржЯржи рж╕ржорзНржнрж╛ржмржирж╛ ржмрзГржжрзНржзрж┐ ржХрж░ржЫрзЗ ржПржмржВ рж╕рзНржерж╛ржирзАржпрж╝ ржЕрж░рзНржержирзАрждрж┐рж░ ржЙржирзНржиржпрж╝ржирзЗ ржнрзВржорж┐ржХрж╛ рж░рж╛ржЦржЫрзЗред`,
    history: `ЁЯПЫя╕П ржорзАрж░ржЧржбрж╝ ржПрж▓рж╛ржХрж╛рж░ ржЗрждрж┐рж╣рж╛рж╕:
ржорзАрж░ржЧржбрж╝ ржПрж▓рж╛ржХрж╛ржЯрж┐ ржкржЮрзНржЪржЧржбрж╝ рж╕ржжрж░ ржЙржкржЬрзЗрж▓рж╛рж░ ржПржХржЯрж┐ ржкрзНрж░рж╛ржЪрзАржи ржУ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржЬржиржкржжред рж╕рзНржерж╛ржирзАрзЯ ржЗрждрж┐рж╣рж╛рж╕ржмрж┐ржж ржУ ржкрзНрж░ржмрзАржгржжрзЗрж░ ржорждрзЗ, ржПржЗ ржЕржЮрзНржЪрж▓рзЗ ржкрзВрж░рзНржмрзЗ ржЬржорж┐ржжрж╛рж░ ржУ ржорзБрж╕рж▓рж┐ржо рж╢рж╛рж╕ржХржжрзЗрж░ ржмрж╕рждрж┐ ржЫрж┐рж▓ред тАЬржорзАрж░тАЭ рж╢ржмрзНржжржЯрж┐ ржерзЗржХрзЗржЗ ржзрж╛рж░ржгрж╛ ржХрж░рж╛ рж╣ржпрж╝ ржпрзЗ ржПржЦрж╛ржирзЗ ржХрзЛржирзЛ ржПржХ рж╕ржорзЯ ржорзБрж╕рж▓рж┐ржо ржЕржнрж┐ржЬрж╛ржд ржмрж╛ ржорзАрж░ рж╢рзНрж░рзЗржгрж┐рж░ ржмрж╛рж╕ ржЫрж┐рж▓, ржпрж╛рж░рж╛ рж░рж╛ржЬржирзИрждрж┐ржХ ржмрж╛ рж╕рж╛ржорж╛ржЬрж┐ржХржнрж╛ржмрзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржнрзВржорж┐ржХрж╛ ржкрж╛рж▓ржи ржХрж░рждрзЗржиред
  
  ржПржЫрж╛рзЬрж╛ ржорзАрж░ржЧржбрж╝ ржЫрж┐рж▓ ржХрж░рждрзЛржпрж╝рж╛ ржиржжрзАрж░ рждрзАрж░ржмрж░рзНрждрзА ржПржХржЯрж┐ ржШржиржмрж╕рждрж┐ржкрзВрж░рзНржг ржЕржЮрзНржЪрж▓, ржпрж╛рж░ ржорж╛ржзрзНржпржорзЗ ржирзМржкржерзЗ ржкржгрзНржп ржкрж░рж┐ржмрж╣ржи ржУ рж╕ржВржпрзЛржЧ ржмрзНржпржмрж╕рзНржерж╛рж░ржУ ржкрзНрж░ржЪрж▓ржи ржЫрж┐рж▓ред ржПржЗ ржиржжрзА ржШрж┐рж░рзЗржЗ ржЧрзЬрзЗ ржЙржарзЗржЫрж┐рж▓ ржмрж╣рзБ ржкрзНрж░рж╛ржЪрзАржи ржмрж╕рждрж┐, ржпрж╛ ржЗрждрж┐рж╣рж╛рж╕ ржУ ржРрждрж┐рж╣рзНржпрзЗрж░ ржзрж╛рж░ржХред`,
    architecture: `ЁЯФ╖ рж╕рзНржерж╛ржкрждрзНржп ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:
  ржкрзНрж░рж╛ржХрзГрждрж┐ржХ рж▓рзНржпрж╛ржирзНржбрж╕рзНржХрзЗржк ржмржЬрж╛ржпрж╝ рж░рзЗржЦрзЗ ржЙржирзНржиржпрж╝ржи: ржЧрж╛ржЫржкрж╛рж▓рж╛ ржХрзЗржЯрзЗ ржиржпрж╝, ржмрж░ржВ ржЧрж╛ржЫ ржШрж┐рж░рзЗржЗ рж╣рж╛ржБржЯрж╛рж░ ржкрже, ржмрж╕рж╛рж░ рж╕рзНржерж╛ржи рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
  
  ржиржжрзАрж░ рждрзАрж░ ржШрзЗржБрж╖рзЗ ржмрж╛ржБржз: ржХрж░рждрзЛржпрж╝рж╛ ржиржжрзАрж░ ржзрж╛рж░рзЗ ржПржХржЯрж┐ рж╕рзБрж░ржХрзНрж╖рж┐ржд ржШрж╛ржЯ ржмрж╛ ржУрзЯрж╛ржХржУрзЯрзЗ ржирж┐рж░рзНржорж╛ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржпрж╛ рж╕рзНржерж╛ржирзАржпрж╝ ржмржирзНржпрж╛ ржирж┐рзЯржирзНрждрзНрж░ржг ржУ рж╕рзМржирзНржжрж░рзНржп ржмрж░рзНржзржирзЗ рж╕рж╣рж╛ржпрж╝ржХред
  
  ржкрзНрж░ржмрзЗрж╢ржкржерзЗ ржжрзГрж╖рзНржЯрж┐ржиржирзНржжржи ржЧрзЗржЯ ржУ ржирж╛ржоржлрж▓ржХ: ржпрж╛ рж╕рж░ржХрж╛рж░рж┐ ржкрж░рзНржпржЯржиржХрзЗржирзНржжрзНрж░рзЗрж░ ржЗржорзЗржЬ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзЗред
  
  ржкрж░рзНржпржЯржХржжрзЗрж░ ржЬржирзНржп рж╕рзАржЯрж┐ржВ ржПрж░рж┐ржпрж╝рж╛, ржЦрзЗрж▓рж╛рж░ ржорж╛ржа ржУ ржЖрж▓рзЛржХрж╕ржЬрзНржЬрж╛ред
  
  ржкрже ржУ ржмрзЗржЮрзНржЪржЧрзБрж▓рзЛ ржкрж╛ржерж░ ржУ ржЗржЯрзЗрж░ рж╕ржоржирзНржмржпрж╝рзЗ рждрзИрж░рж┐, ржпрж╛рждрзЗ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ рж╕рзМржирзНржжрж░рзНржп ржмрж┐ржШрзНржирж┐ржд ржирж╛ рж╣ржпрж╝ред`,
    how_to_go: `ржмрж╛рж╕ржпрзЛржЧрзЗ:
  
  ржврж╛ржХрж╛рж░ ржЧрж╛ржмрждрж▓рзА, ржХрж▓рзНржпрж╛ржгржкрзБрж░, ржмрж╛ рж╕рж╛ржпрж╝рзЗржжрж╛ржмрж╛ржж ржерзЗржХрзЗ ржкржЮрзНржЪржЧржбрж╝ржЧрж╛ржорзА ржиржи-ржПрж╕рж┐ ржмрж╛ ржПрж╕рж┐ ржмрж╛рж╕ ржЫрж╛ржбрж╝рзЗред
  
  ржХрж┐ржЫрзБ ржЬржиржкрзНрж░рж┐ржпрж╝ ржмрж╛рж╕ рж╕рж╛рж░рзНржнрж┐рж╕:
  
  рж╣рж╛ржирж┐ржл, рж╢рзНржпрж╛ржорж▓рзА, ржирж░рзНржержмрзЗржЩрзНржЧрж▓, ржПрж╕ржЖрж░ ржЯрзНрж░рж╛ржнрзЗрж▓рж╕
  
  ржнрзНрж░ржоржг рж╕ржоржпрж╝: ржкрзНрж░рж╛ржпрж╝ рззрзжтАУрззрзи ржШржгрзНржЯрж╛
  
  ржЯрзНрж░рзЗржиржпрзЛржЧрзЗ:
  
  ржкржЮрзНржЪржЧржбрж╝ ржПржХрзНрж╕ржкрзНрж░рзЗрж╕ (ржврж╛ржХрж╛ ржХржорж▓рж╛ржкрзБрж░ ржерзЗржХрзЗ ржЫрж╛ржбрж╝рзЗ ржкрзНрж░рждрж┐ржжрж┐ржи рж░рж╛ржд рззрзж:рзкрзл ржорж┐ржирж┐ржЯрзЗ ржПржмржВ рж╕ржХрж╛рж▓ рзо:рзлрзж ржорж┐ржирж┐ржЯрзЗ ржкржЮрзНржЪржЧржбрж╝ ржкрзМржБржЫрзЗ) тАФ ржПржЯрж┐ ржПржХржЯрж┐ ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ ржУ рж╕ржорзЯржирж┐рж░рзНржнрж░ ржмрж┐ржХрж▓рзНржкред
  
  ржирж┐ржЬрж╕рзНржм ржЧрж╛ржбрж╝рж┐рждрзЗ:
  
  ржврж╛ржХрж╛ тЖТ ржЯрж╛ржЩрзНржЧрж╛ржЗрж▓ тЖТ рж╕рж┐рж░рж╛ржЬржЧржЮрзНржЬ тЖТ ржмржЧрзБржбрж╝рж╛ тЖТ ржжрж┐ржирж╛ржЬржкрзБрж░ тЖТ ржарж╛ржХрзБрж░ржЧрж╛ржБржУ тЖТ ржкржЮрзНржЪржЧржбрж╝
  
  ржкрзНрж░рж╛ржпрж╝ рззрзжтАУрззрзз ржШржгрзНржЯрж╛ рж╕ржоржпрж╝ рж▓рж╛ржЧржмрзЗ, рж░рж╛рж╕рзНрждрж╛ржШрж╛ржЯ ржнрж╛рж▓рзЗрж╛ ржерж╛ржХрж▓рзЗред
  
  ржкржЮрзНржЪржЧржбрж╝ рж╢рж╣рж░ ржерзЗржХрзЗ ржЕржЯрзЛрж░рж┐ржХрж╢рж╛ ржмрж╛ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржпрж╛ржиржмрж╛рж╣ржирзЗ ржХрж░рзЗ рж╕рж╣ржЬрзЗржЗ ржЗржХрзЛ ржкрж╛рж░рзНржХрзЗ ржкрзМржБржЫрж╛ржирзЛ ржпрж╛ржпрж╝ред`,
    where_to_stay: `ржкржЮрзНржЪржЧржбрж╝ рж╢рж╣рж░рзЗ ржмрж┐ржнрж┐ржирзНржи ржорж╛ржирзЗрж░ рж╣рзЛржЯрзЗрж▓ ржУ ржЧрзЗрж╕рзНржЯ рж╣рж╛ржЙрж╕ рж░ржпрж╝рзЗржЫрзЗ, ржпрзЗржЦрж╛ржи ржерзЗржХрзЗ ржЗржХрзЛ ржкрж╛рж░рзНржХрзЗ рж╕рж╣ржЬрзЗржЗ ржпрж╛рждрж╛ржпрж╝рж╛ржд ржХрж░рж╛ ржпрж╛ржпрж╝ред
  
  ЁЯФ╣ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржХрж┐ржЫрзБ ржерж╛ржХрж╛рж░ ржЬрж╛ржпрж╝ржЧрж╛:
  Hotel Mouchak International тАУ рж╢рж╣рж░рзЗрж░ ржкрзНрж░рж╛ржгржХрзЗржирзНржжрзНрж░рзЗ ржЕржмрж╕рзНржерж┐ржд
  
  Hotel North View тАУ ржорж╛ржирж╕ржорзНржоржд ржкрж░рж┐ржмрзЗрж╢ ржУ рж░рзБржо рж╕рж╛рж░рзНржнрж┐рж╕
  
  Hotel Doot тАУ ржмрж╛ржЬрзЗржЯ ржлрзНрж░рзЗржирзНржбрж▓рж┐ ржЕржкрж╢ржи
  
  Circuit House (рж╕рж░ржХрж╛рж░рж┐): рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕржирзБржорзЛржжрж┐ржд ржЕрждрж┐ржерж┐ржжрзЗрж░ ржЬржирзНржп`,
    where_to_eat: `ржЗржХрзЛ ржкрж╛рж░рзНржХрзЗрж░ ржнрж┐рждрж░рзЗ ржЫрзЛржЯ ржЫрзЛржЯ ржЦрж╛ржмрж╛рж░рзЗрж░ ржжрзЛржХрж╛ржирзЗ ржЪрж╛, рж╕рзНржирзНржпрж╛ржХрж╕, ржлрзБржЪржХрж╛ ржЗрждрзНржпрж╛ржжрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ред ржкрзВрж░рзНржгрж╛ржЩрзНржЧ ржЦрж╛ржмрж╛рж░рзЗрж░ ржЬржирзНржп ржкржЮрзНржЪржЧржбрж╝ рж╢рж╣рж░рзЗ ржЕржмрж╕рзНржерж┐ржд Food Court Panchagarh, Panshi Restaurant, Kabab Ghor, ржУ Deshi & Chinese Restora-рждрзЗ ржпрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ред ржкрж░рж┐ржмрж╛рж░ ржирж┐ржпрж╝рзЗ ржЧрзЗрж▓рзЗ рж╢рж╣рж░ ржерзЗржХрзЗ ржЦрж╛ржмрж╛рж░ ржирж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ржЗ ржнрж╛рж▓рзЛред`,
    ticket_price: "ржЗржХрзЛ ржкрж╛рж░рзНржХрзЗрж░ ржкрзНрж░ржмрзЗрж╢ ржорзВрж▓рзНржп рзйрзж ржЯрж╛ржХрж╛",
    opening_hours:
      "ржЗржХрзЛ ржкрж╛рж░рзНржХ ржкрзНрж░рждрж┐ржжрж┐ржи рж╕ржХрж╛рж▓ рззрзжржЯрж╛ ржерзЗржХрзЗ рж╕ржирзНржзрзНржпрж╛ рзмржЯрж╛ ржкрж░рзНржпржирзНржд ржЦрзЛрж▓рж╛ ржерж╛ржХрзЗред ржмрж┐ржХрзЗрж▓ рзкржЯрж╛рж░ ржкрж░ ржирждрзБржи ржжрж░рзНрж╢ржирж╛рж░рзНржерзАржжрзЗрж░ ржкрзНрж░ржмрзЗрж╢ рж╕рзАржорж┐ржд рж╣рждрзЗ ржкрж╛рж░рзЗ, рждрж╛ржЗ ржЖржЧрзЗржнрж╛ржЧрзЗ ржпрж╛ржУржпрж╝рж╛ ржнрж╛рж▓рзЛред",
    best_time_to_visit:
      "ржЕржХрзНржЯрзЛржмрж░ ржерзЗржХрзЗ ржорж╛рж░рзНржЪ ржкрж░рзНржпржирзНржд рж╕ржоржпрж╝ржЯрж┐ ржЗржХрзЛ ржкрж╛рж░рзНржХ ржнрзНрж░ржоржгрзЗрж░ ржЬржирзНржп рж╕ржмржЪрзЗржпрж╝рзЗ ржЙржкржпрзЛржЧрзАред рж╢рзАрждржХрж╛рж▓рзЗ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рзБржирзНржжрж░ ржерж╛ржХрзЗ, ржиржжрзАрж░ ржкрж╛ржирж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржерж╛ржХрзЗ ржПржмржВ рж╕ржмрзБржЬ ржкрзНрж░ржХрзГрждрж┐ ржлрзБржЯрзЗ ржУржарзЗред ржмрж░рзНрж╖рж╛рж░ ржкрж░рзЗрж░ рж╕ржоржпрж╝ ржпрзЗржоржи рж╕рзЗржкрзНржЯрзЗржорзНржмрж░-ржЕржХрзНржЯрзЛржмрж░ ржорж╛рж╕рзЗржУ ржкрзНрж░ржХрзГрждрж┐рж░ рж░рзВржк ржЙржкржнрзЛржЧржпрзЛржЧрзНржпред рж╢рзБржХрзНрж░ржмрж╛рж░ ржУ рж╢ржирж┐ржмрж╛рж░рзЗ ржжрж░рзНрж╢ржирж╛рж░рзНржерзАрж░ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж╢рж┐ ржерж╛ржХрзЗред",
    map_link: "",
  })

  // File state - separate from form data
  const [mainImage, setMainImage] = useState<File | null>(null)
  const [galleryFiles, setGalleryFiles] = useState<File[]>([])

  const [isCreateCategoryModalOpen, setIsCreateCategoryModalOpen] = useState(false)
  const [newCategoryName, setNewCategoryName] = useState("")
  const [mainImagePreview, setMainImagePreview] = useState<string>("")
  const [galleryPreviews, setGalleryPreviews] = useState<string[]>([])

  const router = useRouter()

  // Handle input changes for text fields
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { id, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [id]: value,
    }))

    // If this is the category selection, update the selectedCategory state
    if (id === "category_id" && value) {
      const category = data?.data?.find((cat: Category) => cat.id === value)
      setSelectedCategory(category || null)
    }
  }
  const handleEditorChange = (editorContent: string) => {
    setFormData((prev) => ({ ...prev, purpose_and_significance: editorContent }));
  };
  const handleAttractionsChange = (editorContent: string) => {
    setFormData((prev) => ({ ...prev, main_attractions: editorContent }));
  };


  // Handle main image file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      const fileType = file.type.toLowerCase()
      const fileSize = file.size

      // Validate file type
      if (fileType !== "image/jpeg" && fileType !== "image/jpg" && fileType !== "image/png") {
        toast.error("ржЕржмрзИржз ржлрж╛ржЗрж▓ ржЯрж╛ржЗржкред рж╢рзБржзрзБржорж╛рждрзНрж░ JPG, JPEG, PNG ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред")
        e.target.value = "" // Clear the input
        return
      }

      // Validate file size (2MB limit)
      if (fileSize > 2 * 1024 * 1024) {
        toast.error("ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ 2MB ржПрж░ ржмрзЗрж╢рж┐ред ржЫрзЛржЯ рж╕рж╛ржЗржЬрзЗрж░ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред")
        e.target.value = "" // Clear the input
        return
      }

      setMainImage(file)

      // Create a preview URL
      const previewUrl = URL.createObjectURL(file)
      setMainImagePreview(previewUrl)
    }
  }

  // Handle gallery image file selection
  const handleGalleryFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const files = Array.from(e.target.files)

      // Validate file types and sizes
      const validFiles = files.filter((file) => {
        const fileType = file.type.toLowerCase()
        const isValidType = fileType === "image/jpeg" || fileType === "image/jpg" || fileType === "image/png"
        const isValidSize = file.size <= 2 * 1024 * 1024 // 2MB limit

        if (!isValidType) {
          toast.error(`${file.name} - ржЕржмрзИржз ржлрж╛ржЗрж▓ ржЯрж╛ржЗржкред рж╢рзБржзрзБржорж╛рждрзНрж░ JPG, JPEG, PNG ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред`)
        }

        if (!isValidSize) {
          toast.error(`${file.name} - ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ 2MB ржПрж░ ржмрзЗрж╢рж┐ред ржЫрзЛржЯ рж╕рж╛ржЗржЬрзЗрж░ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред`)
        }

        return isValidType && isValidSize
      })

      if (validFiles.length === 0) return

      // Add new files to gallery
      setGalleryFiles((prev) => [...prev, ...validFiles])

      // Create preview URLs for new files
      const newPreviews = validFiles.map((file) => URL.createObjectURL(file))
      setGalleryPreviews((prev) => [...prev, ...newPreviews])
    }
  }

  // Remove a gallery image
  const removeGalleryImage = (index: number) => {
    setGalleryFiles((prev) => {
      const newFiles = [...prev]
      newFiles.splice(index, 1)
      return newFiles
    })

    setGalleryPreviews((prev) => {
      const newPreviews = [...prev]
      // Revoke the URL to prevent memory leaks
      if (newPreviews[index]) {
        URL.revokeObjectURL(newPreviews[index])
      }
      newPreviews.splice(index, 1)
      return newPreviews
    })
  }

  // Clean up preview URLs when component unmounts
  useEffect(() => {
    return () => {
      if (mainImagePreview) {
        URL.revokeObjectURL(mainImagePreview)
      }
      galleryPreviews.forEach((url) => {
        URL.revokeObjectURL(url)
      })
    }
  }, [])

  const handleCreateCategory = async () => {
    if (newCategoryName.trim()) {
      try {
        await createPlaceCategory({ name: newCategoryName }).unwrap()
        setNewCategoryName("")
        setIsCreateCategoryModalOpen(false)
        toast.success("ржирждрзБржи ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
      } catch (error) {
        toast.error("ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ рждрзИрж░рж┐ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ")
        console.error("Failed to create category:", error)
      }
    }
  }

  // Handle form submission
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault()

    if (!formData.category_id) {
      toast.error("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи")
      return
    }

    if (!mainImage) {
      toast.error("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржкрзНрж░ржзрж╛ржи ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи")
      return
    }

    try {
      // Create FormData object for multipart/form-data
      const formDataToSend = new FormData()

      // Add all text fields
      Object.entries(formData).forEach(([key, value]) => {
        formDataToSend.append(key, value)
      })

      // Add main image file
      if (mainImage) {
        formDataToSend.append("image_url", mainImage)
      }

      // Add gallery files with the Laravel array format (gallery[])
      if (galleryFiles.length > 0) {
        galleryFiles.forEach((file) => {
          formDataToSend.append("gallery[]", file)
        })
      } else {
        // If no gallery images, send an empty array
        formDataToSend.append("gallery", JSON.stringify([]))
      }

      const response = await createTouristPlace(formDataToSend).unwrap()

      if (response.isError) {
        toast.error("ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржи ржпрзЛржЧ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ")
        return
      }

      toast.success("ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржи рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
      router.push("/dashboard/tourist-places")
    } catch (error: any) {
      toast.error(error?.data?.errMsg || "ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржи ржпрзЛржЧ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ")
    }
  }

  return (
    <div className="container mx-auto py-6 p-2 bg-white">
      <div className="p-2">
        <div className="flex items-center mb-6">
          <Button variant="outline" size="icon" asChild className="mr-4">
            <Link href="/dashboard/tourist-places">
              <ArrowLeft className="h-4 w-4" />
              <span className="sr-only">ржлрж┐рж░рзЗ ржпрж╛ржи</span>
            </Link>
          </Button>
          <h1 className="text-3xl font-bold">ржирждрзБржи ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржи ржпрзЛржЧ ржХрж░рзБржи</h1>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="col-span-1 shadow-sm md:shadow-sm p-2 md:p-3">
              <CardHeader>
                <CardTitle>ржорзМрж▓рж┐ржХ рждржерзНржп</CardTitle>
                <CardDescription>ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржирзЗрж░ ржкрзНрж░рж╛ржержорж┐ржХ рждржерзНржп ржПржЦрж╛ржирзЗ ржжрж┐ржи</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name">рж╕рзНржерж╛ржирзЗрж░ ржирж╛ржо</Label>
                  <Input
                    id="name"
                    placeholder="ржпрзЗржоржи: ржЖрж╣рж╕рж╛ржи ржоржЮрзНржЬрж┐рж▓"
                    value={formData.name}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="location">ржЕржмрж╕рзНржерж╛ржи</Label>
                  <Input
                    id="location"
                    placeholder="ржпрзЗржоржи: ржврж╛ржХрж╛"
                    value={formData.location}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between mb-2">
                    <Label htmlFor="category_id">ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐</Label>
                    <Dialog open={isCreateCategoryModalOpen} onOpenChange={setIsCreateCategoryModalOpen}>
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm">
                          <Plus className="h-4 w-4 mr-2" />
                          ржирждрзБржи ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>ржирждрзБржи ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ рждрзИрж░рж┐ ржХрж░рзБржи</DialogTitle>
                          <DialogDescription>ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржирзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржирждрзБржи ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ рждрзИрж░рж┐ ржХрж░рзБржиред</DialogDescription>
                        </DialogHeader>
                        <div className="space-y-4 py-4">
                          <div className="space-y-2">
                            <Label htmlFor="new-category-name">ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐рж░ ржирж╛ржо</Label>
                            <Input
                              id="new-category-name"
                              placeholder="ржпрзЗржоржи: ржРрждрж┐рж╣рж╛рж╕рж┐ржХ рж╕рзНржерж╛ржи"
                              value={newCategoryName}
                              onChange={(e) => setNewCategoryName(e.target.value)}
                            />
                          </div>
                        </div>
                        <DialogFooter>
                          <Button variant="outline" onClick={() => setIsCreateCategoryModalOpen(false)}>
                            ржмрж╛рждрж┐рж▓ ржХрж░рзБржи
                          </Button>
                          <Button onClick={handleCreateCategory} disabled={isLoading || !newCategoryName.trim()}>
                            {isLoading ? "ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи..." : "рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи"}
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  </div>

                  <div className="space-y-2">
                    <select
                      id="category_id"
                      value={formData.category_id}
                      onChange={handleChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
                      required
                    >
                      <option value="">ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
                      {data?.data?.map((category: Category) => (
                        <option key={category.id} value={category.id}>
                          {category.name}
                        </option>
                      ))}
                    </select>

                    {selectedCategory && (
                      <div className="mt-2 flex items-center">
                        <Badge
                          variant="outline"
                          className="bg-green-50 text-green-700 border-green-200 flex items-center gap-1"
                        >
                          <Check className="h-3 w-3" />
                          ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐: {selectedCategory.name}
                        </Badge>
                      </div>
                    )}
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="description">ржмрж┐ржмрж░ржг</Label>
                  <Textarea
                    id="description"
                    placeholder="рж╕рзНржерж╛ржирзЗрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж┐ржмрж░ржг рж▓рж┐ржЦрзБржи..."
                    rows={4}
                    value={formData.description}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="history">ржЗрждрж┐рж╣рж╛рж╕</Label>
                  <Textarea
                    id="history"
                    placeholder="рж╕рзНржерж╛ржирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={4}
                    value={formData.history}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="architecture">рж╕рзНржерж╛ржкрждрзНржп</Label>
                  <Textarea
                    id="architecture"
                    placeholder="рж╕рзНржерж╛ржирзЗрж░ рж╕рзНржерж╛ржкрждрзНржп рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={3}
                    value={formData.architecture}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="special_features">ржмрж┐рж╢рзЗрж╖ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп</Label>
                  <Textarea
                    id="special_features"
                    placeholder="рж╕рзНржерж╛ржирзЗрж░ ржмрж┐рж╢рзЗрж╖ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={3}
                    value={formData.special_features}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="main_attractions">ржорзВрж▓ ржЖржХрж░рзНрж╖ржгрж╕ржорзВрж╣</Label>
                  {/* <Textarea
                    id="main_attractions"
                    placeholder="рж╕рзНржерж╛ржирзЗрж░ ржкрзНрж░ржзрж╛ржи ржЖржХрж░рзНрж╖ржгрж╕ржорзВрж╣ рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={4}
                    value={formData.main_attractions}
                    onChange={handleChange}
                  /> */}
                  <LokkhoEditor onChange={handleAttractionsChange} />


                </div>
                <div className="space-y-2">
                  {/* <Label htmlFor="purpose_and_significance">рж▓ржХрзНрж╖рзНржп ржУ ржЙржжрзНржжрзЗрж╢рзНржп</Label>
                  <Textarea
                    id="purpose_and_significance"
                    placeholder="рж╕рзНржерж╛ржирзЗрж░ рж▓ржХрзНрж╖рзНржп ржУ ржЙржжрзНржжрзЗрж╢рзНржп рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={4}
                    value={formData.purpose_and_significance}
                    onChange={handleChange}
                  /> */}
                  <Label htmlFor="purpose_and_significance">рж▓ржХрзНрж╖рзНржп ржУ ржЙржжрзНржжрзЗрж╢рзНржп</Label>
                  <LokkhoEditor onChange={handleEditorChange} />


                </div>
              </CardContent>
            </Card>

            <Card className="col-span-1 shadow-sm md:shadow-sm p-2 md:p-3">
              <CardHeader>
                <CardTitle>ржнрзНрж░ржоржг рждржерзНржп</CardTitle>
                <CardDescription>ржнрзНрж░ржоржгржХрж╛рж░рзАржжрзЗрж░ ржЬржирзНржп ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рждржерзНржп</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="how_to_go">ржпрж╛ржУржпрж╝рж╛рж░ ржЙржкрж╛ржпрж╝</Label>
                  <Textarea
                    id="how_to_go"
                    placeholder="ржХрж┐ржнрж╛ржмрзЗ ржпрж╛ржмрзЗржи рждрж╛рж░ ржмрж┐ржмрж░ржг ржжрж┐ржи..."
                    rows={3}
                    value={formData.how_to_go}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="where_to_stay">ржерж╛ржХрж╛рж░ ржмрзНржпржмрж╕рзНржерж╛</Label>
                  <Textarea
                    id="where_to_stay"
                    placeholder="ржерж╛ржХрж╛рж░ ржмрзНржпржмрж╕рзНржерж╛ рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={3}
                    value={formData.where_to_stay}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="where_to_eat">ржЦрж╛ржмрж╛рж░рзЗрж░ ржмрзНржпржмрж╕рзНржерж╛</Label>
                  <Textarea
                    id="where_to_eat"
                    placeholder="ржЦрж╛ржмрж╛рж░рзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ рж╕ржорзНржкрж░рзНржХрзЗ рж▓рж┐ржЦрзБржи..."
                    rows={3}
                    value={formData.where_to_eat}
                    onChange={handleChange}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="ticket_price">ржЯрж┐ржХрзЗржЯ ржорзВрж▓рзНржп</Label>
                    <Input
                      id="ticket_price"
                      placeholder="ржпрзЗржоржи: рзлрзж ржЯрж╛ржХрж╛"
                      value={formData.ticket_price}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="opening_hours">ржЦрзЛрж▓рж╛рж░ рж╕ржоржпрж╝</Label>
                    <Input
                      id="opening_hours"
                      placeholder="ржпрзЗржоржи: рж╕ржХрж╛рж▓ рззрзжржЯрж╛ - рж╕ржирзНржзрзНржпрж╛ рзмржЯрж╛"
                      value={formData.opening_hours}
                      onChange={handleChange}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="best_time_to_visit">ржнрзНрж░ржоржгрзЗрж░ рж╕рзЗрж░рж╛ рж╕ржоржпрж╝</Label>
                  <Input
                    id="best_time_to_visit"
                    placeholder="ржпрзЗржоржи: ржЕржХрзНржЯрзЛржмрж░ - ржорж╛рж░рзНржЪ"
                    value={formData.best_time_to_visit}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="map_link">ржЧрзБржЧрж▓ ржорзНржпрж╛ржк рж▓рж┐ржВржХ</Label>
                  <Input
                    id="map_link"
                    placeholder="ржЧрзБржЧрж▓ ржорзНржпрж╛ржк рж▓рж┐ржВржХ ржжрж┐ржи"
                    value={formData.map_link}
                    onChange={handleChange}
                  />
                </div>
              </CardContent>
            </Card>

            <Card className="col-span-1 lg:col-span-2 shadow-sm md:shadow-sm p-2 md:p-3">
              <CardHeader>
                <CardTitle>ржЫржмрж┐ рж╕ржорзВрж╣</CardTitle>
                <CardDescription>ржжрж░рзНрж╢ржирзАржпрж╝ рж╕рзНржерж╛ржирзЗрж░ ржЫржмрж┐ ржПржмржВ ржЧрзНржпрж╛рж▓рж╛рж░рж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="main_image">ржкрзНрж░ржзрж╛ржи ржЫржмрж┐</Label>
                  <div className="flex flex-col gap-2">
                    <Input
                      id="main_image"
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="cursor-pointer"
                      required
                    />
                    {mainImagePreview && (
                      <div className="mt-2 border rounded-md p-2 max-w-xs">
                        <Image
                          src={mainImagePreview || "/placeholder.svg"}
                          alt="Main image preview"
                          width={300}
                          height={200}
                          className="rounded-md object-cover w-full h-auto"
                          onError={(e) => {
                            e.currentTarget.src = "/image-preview-concept.png"
                          }}
                        />
                      </div>
                    )}
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label>ржЧрзНржпрж╛рж▓рж╛рж░рж┐ ржЫржмрж┐</Label>
                    <Input
                      id="gallery_images"
                      type="file"
                      accept="image/*"
                      onChange={handleGalleryFileChange}
                      className="cursor-pointer w-auto"
                      multiple
                    />
                  </div>

                  {galleryFiles.length > 0 ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-2">
                      {galleryPreviews.map((preview, index) => (
                        <div key={index} className="border rounded-md p-3 space-y-2 relative">
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={() => removeGalleryImage(index)}
                            className="absolute top-2 right-2 h-8 w-8 p-0 bg-white/80 text-red-500 rounded-full hover:bg-white/90 z-10"
                          >
                            <X className="h-4 w-4" />
                            <span className="sr-only">Remove</span>
                          </Button>
                          <div className="mt-2">
                            <Image
                              src={preview || "/placeholder.svg"}
                              alt={`Gallery image ${index + 1}`}
                              width={300}
                              height={200}
                              className="rounded-md object-cover w-full h-32"
                              onError={(e) => {
                                e.currentTarget.src = "/gallery-preview.png"
                              }}
                            />
                          </div>
                          <p className="text-sm text-gray-500 mt-1 truncate">
                            {galleryFiles[index]?.name || `Image ${index + 1}`}
                          </p>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center p-8 border border-dashed rounded-md">
                      <p className="text-gray-500">ржЧрзНржпрж╛рж▓рж╛рж░рж┐рж░ ржЬржирзНржп ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи</p>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Button variant="outline" asChild>
                  <Link href="/dashboard/tourist-places">ржмрж╛рждрж┐рж▓ ржХрж░рзБржи</Link>
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? "ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи..." : "рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи"}
                </Button>
              </CardFooter>
            </Card>
          </div>
        </form>
      </div>
    </div>
  )
}
